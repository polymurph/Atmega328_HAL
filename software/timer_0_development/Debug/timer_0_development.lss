
timer_0_development.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800106  00800106  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d46  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000756  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b2  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00001eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  00002160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000321  00000000  00000000  00002a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_15>
  40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 21 01 	call	0x242	; 0x242 <main>
  9e:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dummy>:
	t0_compareMatchEnableRoutineB_FLG = 1;
}

void hal_timer0_compreMatch_dissableCBroutineB()
{
	t0_compareMatchEnableRoutineB_FLG = 0;
  a6:	08 95       	ret

000000a8 <hal_timer0_enableModule>:
  a8:	e4 e6       	ldi	r30, 0x64	; 100
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <hal_timer0_setMode>:
  b4:	94 b5       	in	r25, 0x24	; 36
  b6:	9c 7f       	andi	r25, 0xFC	; 252
  b8:	94 bd       	out	0x24, r25	; 36
  ba:	95 b5       	in	r25, 0x25	; 37
  bc:	97 7f       	andi	r25, 0xF7	; 247
  be:	95 bd       	out	0x25, r25	; 37
  c0:	94 b5       	in	r25, 0x24	; 36
  c2:	28 2f       	mov	r18, r24
  c4:	23 70       	andi	r18, 0x03	; 3
  c6:	92 2b       	or	r25, r18
  c8:	94 bd       	out	0x24, r25	; 36
  ca:	95 b5       	in	r25, 0x25	; 37
  cc:	88 70       	andi	r24, 0x08	; 8
  ce:	89 2b       	or	r24, r25
  d0:	85 bd       	out	0x25, r24	; 37
  d2:	08 95       	ret

000000d4 <hal_timer0_setCompareValueA>:
  d4:	87 bd       	out	0x27, r24	; 39
  d6:	08 95       	ret

000000d8 <hal_timer0_setCompareValueB>:
  d8:	88 bd       	out	0x28, r24	; 40
  da:	08 95       	ret

000000dc <hal_timer0_setOutputA>:
  dc:	94 b5       	in	r25, 0x24	; 36
  de:	9f 73       	andi	r25, 0x3F	; 63
  e0:	94 bd       	out	0x24, r25	; 36
  e2:	94 b5       	in	r25, 0x24	; 36
  e4:	98 2b       	or	r25, r24
  e6:	94 bd       	out	0x24, r25	; 36
  e8:	81 11       	cpse	r24, r1
  ea:	56 9a       	sbi	0x0a, 6	; 10
  ec:	08 95       	ret

000000ee <hal_timer0_setOutputB>:
  ee:	94 b5       	in	r25, 0x24	; 36
  f0:	9f 7c       	andi	r25, 0xCF	; 207
  f2:	94 bd       	out	0x24, r25	; 36
  f4:	94 b5       	in	r25, 0x24	; 36
  f6:	98 2b       	or	r25, r24
  f8:	94 bd       	out	0x24, r25	; 36
  fa:	81 11       	cpse	r24, r1
  fc:	55 9a       	sbi	0x0a, 5	; 10
  fe:	08 95       	ret

00000100 <hal_timer0_setClockSource>:
 100:	95 b5       	in	r25, 0x25	; 37
 102:	9f 78       	andi	r25, 0x8F	; 143
 104:	95 bd       	out	0x25, r25	; 37
 106:	95 b5       	in	r25, 0x25	; 37
 108:	98 2b       	or	r25, r24
 10a:	95 bd       	out	0x25, r25	; 37
 10c:	86 30       	cpi	r24, 0x06	; 6
 10e:	11 f4       	brne	.+4      	; 0x114 <hal_timer0_setClockSource+0x14>
 110:	54 98       	cbi	0x0a, 4	; 10
 112:	5c 98       	cbi	0x0b, 4	; 11
 114:	08 95       	ret

00000116 <__vector_14>:
}

// compare match ISR for COMPA
ISR(TIMER0_COMPA_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	ef 93       	push	r30
 136:	ff 93       	push	r31
	if(t0_compareMatchEnableRoutineA_FLG) t0_compareMatchACallBack();
 138:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <t0_compareMatchEnableRoutineA_FLG>
 13c:	88 23       	and	r24, r24
 13e:	29 f0       	breq	.+10     	; 0x14a <__vector_14+0x34>
 140:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <t0_compareMatchACallBack>
 144:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <t0_compareMatchACallBack+0x1>
 148:	09 95       	icall
}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_15>:

// compare match ISR for COMPB
ISR(TIMER0_COMPB_vect)
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	if(t0_compareMatchEnableRoutineB_FLG) t0_compareMatchBCallBack();
 18e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 192:	88 23       	and	r24, r24
 194:	29 f0       	breq	.+10     	; 0x1a0 <__vector_15+0x34>
 196:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 19a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 19e:	09 95       	icall
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__vector_16>:

// overflow match
ISR(TIMER0_OVF_vect)
{
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	2f 93       	push	r18
 1ce:	3f 93       	push	r19
 1d0:	4f 93       	push	r20
 1d2:	5f 93       	push	r21
 1d4:	6f 93       	push	r22
 1d6:	7f 93       	push	r23
 1d8:	8f 93       	push	r24
 1da:	9f 93       	push	r25
 1dc:	af 93       	push	r26
 1de:	bf 93       	push	r27
 1e0:	ef 93       	push	r30
 1e2:	ff 93       	push	r31
	if(t0_overflowEnbaleRoutine_FLG) t0_overflowCallBack();
 1e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t0_overflowEnbaleRoutine_FLG>
 1e8:	88 23       	and	r24, r24
 1ea:	29 f0       	breq	.+10     	; 0x1f6 <__vector_16+0x34>
 1ec:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <t0_overflowCallBack>
 1f0:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <t0_overflowCallBack+0x1>
 1f4:	09 95       	icall
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <timer0_normal_mode>:
	hal_timer0_setMode(t0_mode_CTC);
	hal_timer0_setClockSource(t0_clk_CLK_DIV_1024);
	hal_timer0_setOutputA(t0_outA_TOGGLE_ON_COMPARE);
	hal_timer0_setOutputB(t0_outB_TOGGLE_ON_COMPARE);
	hal_timer0_setCompareValueA(128);
	hal_timer0_setCompareValueB(64);
 218:	0e 94 54 00 	call	0xa8	; 0xa8 <hal_timer0_enableModule>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 5a 00 	call	0xb4	; 0xb4 <hal_timer0_setMode>
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	0e 94 80 00 	call	0x100	; 0x100 <hal_timer0_setClockSource>
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	0e 94 6e 00 	call	0xdc	; 0xdc <hal_timer0_setOutputA>
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	0e 94 77 00 	call	0xee	; 0xee <hal_timer0_setOutputB>
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	0e 94 6a 00 	call	0xd4	; 0xd4 <hal_timer0_setCompareValueA>
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	0e 94 6c 00 	call	0xd8	; 0xd8 <hal_timer0_setCompareValueB>
 240:	08 95       	ret

00000242 <main>:
}


int main(void)
{
	timer0_normal_mode();
 242:	0e 94 0c 01 	call	0x218	; 0x218 <timer0_normal_mode>
 246:	ff cf       	rjmp	.-2      	; 0x246 <main+0x4>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
